/*
Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.

Ex 1:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]

Ex 2: 
Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]
*/

class Solution {
    public int[] findDiagonalOrder(int[][] mat) {
        // validation
        if(mat == null || mat.length == 0 || mat[0].length == 0) {
          return new int[0];
        }
 
        int totalRows = mat.length;
        int totalCols = mat[0].length;
        
        int ans[] = new int[totalRows * totalCols];
        
        int row = 0;
        int col = 0;
        
        for(int i = 0; i < ans.length; i++) {
            ans[i] = mat[row][col];
            if((row + col) % 2 == 0) {
                if(col == totalCols-1) {
                  row++;
                } else if(row == 0) {
                  col++;
                } else {
                    row--;
                    col++;
                }
            } else {
                if(row == totalRows-1) {
                  col++;
                } else if(col == 0) {
                  row++;
                } else {
                    row++;
                    col--;
                }
            }
        }
        return ans;
    }
}
